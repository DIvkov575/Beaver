[Import(Import { names: [(["logging"], None)] }), Import(Import { names: [(["apache_beam"], Some("beam"))] }), Import(ImportFrom { leading_dots: 0, path: ["apache_beam", "options", "pipeline_options"], names: [("PipelineOptions", None)] }), Compound(Funcdef(Funcdef { async: false, decorators: [], name: "process_batch", parameters: TypedArgsList { posonly_args: [], args: [("batch", None, None)], star_args: No, keyword_args: [], star_kwargs: None }, return_type: None, code: [Assignment([Name("processed_batch")], [[ListLiteral([])]]), Compound(For { async: false, item: [Name("element")], iterator: [Name("batch")], for_block: [Assignment([Call(Attribute(Name("logging"), "info"), [Positional(String([PyString { prefix: "", content: "stuff" }]))])], []), Assignment([Call(Attribute(Name("processed_batch"), "append"), [Positional(Name("element"))])], [])], else_block: None }), Return([Name("processed_batch")])] })), Compound(Funcdef(Funcdef { async: false, decorators: [], name: "run", parameters: TypedArgsList { posonly_args: [], args: [("argv", None, Some(None))], star_args: No, keyword_args: [], star_kwargs: None }, return_type: None, code: [Assignment([Name("project")], [[String([PyString { prefix: "", content: "neon-circle-400322" }])]]), Assignment([Name("subscription")], [[String([PyString { prefix: "", content: "tmp" }])]]), Assignment([Name("subscription_str")], [[String([PyString { prefix: "f", content: "projects/{project}/subscriptions/{subscription}" }])]]), Assignment([Name("topic")], [[String([PyString { prefix: "f", content: "projects/{project}/topics/topic-out-sub" }])]]), Assignment([Name("options")], [[Call(Name("PipelineOptions"), [Positional(Name("argv"))])]]), Compound(With([(Call(Attribute(Name("beam"), "Pipeline"), [Keyword("options", Name("options"))]), Some(Name("p")))], [Assignment([Name("input_data")], [[MultiBop(Name("p"), [(BitOr, Bop(Rshift, String([PyString { prefix: "", content: "ReadFromPubSub" }]), Call(Attribute(Attribute(Name("beam"), "io"), "ReadFromPubSub"), [Keyword("subscription", Name("subscription_str"))]))), (BitOr, Bop(Rshift, String([PyString { prefix: "", content: "ProcessBatch" }]), Call(Attribute(Name("beam"), "ParDo"), [Positional(Name("process_batch"))])))])]]), Assignment([Bop(BitOr, Name("input_data"), Bop(Rshift, String([PyString { prefix: "", content: "WriteOutput" }]), Call(Attribute(Attribute(Name("beam"), "io"), "WriteToPubSub"), [Keyword("topic", Name("topic"))])))], [])]))] })), Compound(If([(Bop(Eq, Name("__name__"), String([PyString { prefix: "", content: "__main__" }])), [Assignment([Call(Attribute(Call(Attribute(Name("logging"), "getLogger"), []), "setLevel"), [Positional(Attribute(Name("logging"), "INFO"))])], []), Assignment([Call(Name("run"), [])], [])])], None))]

